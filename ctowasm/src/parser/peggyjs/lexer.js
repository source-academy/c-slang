// @generated by Peggy 4.0.2.
//
// https://peggyjs.org/

"use strict";


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { program: peg$parseprogram };
  var peg$startRuleFunction = peg$parseprogram;

  var peg$c0 = "@";
  var peg$c1 = "#include <";
  var peg$c2 = ">";
  var peg$c3 = "_Static_assert";
  var peg$c4 = "_Thread_local";
  var peg$c5 = "_Imaginary";
  var peg$c6 = "_Noreturn";
  var peg$c7 = "continue";
  var peg$c8 = "register";
  var peg$c9 = "restrict";
  var peg$c10 = "unsigned";
  var peg$c11 = "volatile";
  var peg$c12 = "_Alignas";
  var peg$c13 = "_Alignof";
  var peg$c14 = "_Complex";
  var peg$c15 = "_Generic";
  var peg$c16 = "default";
  var peg$c17 = "typedef";
  var peg$c18 = "_Atomic";
  var peg$c19 = "extern";
  var peg$c20 = "inline";
  var peg$c21 = "double";
  var peg$c22 = "return";
  var peg$c23 = "signed";
  var peg$c24 = "sizeof";
  var peg$c25 = "static";
  var peg$c26 = "struct";
  var peg$c27 = "switch";
  var peg$c28 = "break";
  var peg$c29 = "float";
  var peg$c30 = "const";
  var peg$c31 = "short";
  var peg$c32 = "union";
  var peg$c33 = "while";
  var peg$c34 = "_Bool";
  var peg$c35 = "auto";
  var peg$c36 = "case";
  var peg$c37 = "char";
  var peg$c38 = "goto";
  var peg$c39 = "long";
  var peg$c40 = "else";
  var peg$c41 = "enum";
  var peg$c42 = "void";
  var peg$c43 = "for";
  var peg$c44 = "int";
  var peg$c45 = "if";
  var peg$c46 = "do";
  var peg$c47 = "0";
  var peg$c48 = "0x";
  var peg$c49 = "0X";
  var peg$c50 = "ll";
  var peg$c51 = "LL";
  var peg$c52 = ".";
  var peg$c53 = "'";
  var peg$c54 = "\\'";
  var peg$c55 = "\\\"";
  var peg$c56 = "\\?";
  var peg$c57 = "\\\\";
  var peg$c58 = "\\a";
  var peg$c59 = "\\b";
  var peg$c60 = "\\f";
  var peg$c61 = "\\r";
  var peg$c62 = "\\n";
  var peg$c63 = "\\t";
  var peg$c64 = "\\v";
  var peg$c65 = "\\";
  var peg$c66 = "\\x";
  var peg$c67 = "\"";
  var peg$c68 = "%:%:";
  var peg$c69 = "...";
  var peg$c70 = "<<=";
  var peg$c71 = ">>=";
  var peg$c72 = "++";
  var peg$c73 = "--";
  var peg$c74 = "+=";
  var peg$c75 = "-=";
  var peg$c76 = "*=";
  var peg$c77 = "/=";
  var peg$c78 = "%=";
  var peg$c79 = "&=";
  var peg$c80 = "^=";
  var peg$c81 = "|=";
  var peg$c82 = "==";
  var peg$c83 = "!=";
  var peg$c84 = "<=";
  var peg$c85 = ">=";
  var peg$c86 = ">>";
  var peg$c87 = "<<";
  var peg$c88 = "->";
  var peg$c89 = "&&";
  var peg$c90 = "||";
  var peg$c91 = "##";
  var peg$c92 = "%:";
  var peg$c93 = "<:";
  var peg$c94 = ":>";
  var peg$c95 = "<%";
  var peg$c96 = "%>";

  var peg$r0 = /^[ \t\n\v\f]/;
  var peg$r1 = /^[a-z0-9!"#%&()*+,-.\/: ;<=>?[\]\^_{|}~\t\v\f]/i;
  var peg$r2 = /^[a-z_]/i;
  var peg$r3 = /^[a-z0-9_]/i;
  var peg$r4 = /^[1-9]/;
  var peg$r5 = /^[0-9]/;
  var peg$r6 = /^[0-7]/;
  var peg$r7 = /^[0-9A-F]/i;
  var peg$r8 = /^[Uu]/;
  var peg$r9 = /^[Ll]/;
  var peg$r10 = /^[Ee]/;
  var peg$r11 = /^[+\-]/;
  var peg$r12 = /^[fl]/i;
  var peg$r13 = /^[a-z0-9!'#%&()*+,-.\/: ;<=>?[\]\^_{|}~\t\v\f]/i;
  var peg$r14 = /^[!#%-&(-\/:-?[\]-\^{-~]/;

  var peg$e0 = peg$otherExpectation("separator");
  var peg$e1 = peg$classExpectation([" ", "\t", "\n", "\v", "\f"], false, false);
  var peg$e2 = peg$classExpectation([["a", "z"], ["0", "9"], "!", "\"", "#", "%", "&", "(", ")", "*", "+", [",", "."], "/", ":", " ", ";", "<", "=", ">", "?", "[", "]", "^", "_", "{", "|", "}", "~", "\t", "\v", "\f"], false, true);
  var peg$e3 = peg$literalExpectation("@", false);
  var peg$e4 = peg$classExpectation([["a", "z"], "_"], false, true);
  var peg$e5 = peg$literalExpectation("#include <", false);
  var peg$e6 = peg$literalExpectation(">", false);
  var peg$e7 = peg$literalExpectation("_Static_assert", false);
  var peg$e8 = peg$literalExpectation("_Thread_local", false);
  var peg$e9 = peg$literalExpectation("_Imaginary", false);
  var peg$e10 = peg$literalExpectation("_Noreturn", false);
  var peg$e11 = peg$literalExpectation("continue", false);
  var peg$e12 = peg$literalExpectation("register", false);
  var peg$e13 = peg$literalExpectation("restrict", false);
  var peg$e14 = peg$literalExpectation("unsigned", false);
  var peg$e15 = peg$literalExpectation("volatile", false);
  var peg$e16 = peg$literalExpectation("_Alignas", false);
  var peg$e17 = peg$literalExpectation("_Alignof", false);
  var peg$e18 = peg$literalExpectation("_Complex", false);
  var peg$e19 = peg$literalExpectation("_Generic", false);
  var peg$e20 = peg$literalExpectation("default", false);
  var peg$e21 = peg$literalExpectation("typedef", false);
  var peg$e22 = peg$literalExpectation("_Atomic", false);
  var peg$e23 = peg$literalExpectation("extern", false);
  var peg$e24 = peg$literalExpectation("inline", false);
  var peg$e25 = peg$literalExpectation("double", false);
  var peg$e26 = peg$literalExpectation("return", false);
  var peg$e27 = peg$literalExpectation("signed", false);
  var peg$e28 = peg$literalExpectation("sizeof", false);
  var peg$e29 = peg$literalExpectation("static", false);
  var peg$e30 = peg$literalExpectation("struct", false);
  var peg$e31 = peg$literalExpectation("switch", false);
  var peg$e32 = peg$literalExpectation("break", false);
  var peg$e33 = peg$literalExpectation("float", false);
  var peg$e34 = peg$literalExpectation("const", false);
  var peg$e35 = peg$literalExpectation("short", false);
  var peg$e36 = peg$literalExpectation("union", false);
  var peg$e37 = peg$literalExpectation("while", false);
  var peg$e38 = peg$literalExpectation("_Bool", false);
  var peg$e39 = peg$literalExpectation("auto", false);
  var peg$e40 = peg$literalExpectation("case", false);
  var peg$e41 = peg$literalExpectation("char", false);
  var peg$e42 = peg$literalExpectation("goto", false);
  var peg$e43 = peg$literalExpectation("long", false);
  var peg$e44 = peg$literalExpectation("else", false);
  var peg$e45 = peg$literalExpectation("enum", false);
  var peg$e46 = peg$literalExpectation("void", false);
  var peg$e47 = peg$literalExpectation("for", false);
  var peg$e48 = peg$literalExpectation("int", false);
  var peg$e49 = peg$literalExpectation("if", false);
  var peg$e50 = peg$literalExpectation("do", false);
  var peg$e51 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, true);
  var peg$e52 = peg$literalExpectation("0", false);
  var peg$e53 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e54 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e55 = peg$classExpectation([["0", "7"]], false, false);
  var peg$e56 = peg$literalExpectation("0x", false);
  var peg$e57 = peg$literalExpectation("0X", false);
  var peg$e58 = peg$classExpectation([["0", "9"], ["A", "F"]], false, true);
  var peg$e59 = peg$classExpectation(["U", "u"], false, false);
  var peg$e60 = peg$classExpectation(["L", "l"], false, false);
  var peg$e61 = peg$literalExpectation("ll", false);
  var peg$e62 = peg$literalExpectation("LL", false);
  var peg$e63 = peg$literalExpectation(".", false);
  var peg$e64 = peg$classExpectation(["E", "e"], false, false);
  var peg$e65 = peg$classExpectation(["+", "-"], false, false);
  var peg$e66 = peg$classExpectation(["f", "l"], false, true);
  var peg$e67 = peg$literalExpectation("'", false);
  var peg$e68 = peg$literalExpectation("\\'", false);
  var peg$e69 = peg$literalExpectation("\\\"", false);
  var peg$e70 = peg$literalExpectation("\\?", false);
  var peg$e71 = peg$literalExpectation("\\\\", false);
  var peg$e72 = peg$literalExpectation("\\a", false);
  var peg$e73 = peg$literalExpectation("\\b", false);
  var peg$e74 = peg$literalExpectation("\\f", false);
  var peg$e75 = peg$literalExpectation("\\r", false);
  var peg$e76 = peg$literalExpectation("\\n", false);
  var peg$e77 = peg$literalExpectation("\\t", false);
  var peg$e78 = peg$literalExpectation("\\v", false);
  var peg$e79 = peg$literalExpectation("\\", false);
  var peg$e80 = peg$literalExpectation("\\x", false);
  var peg$e81 = peg$literalExpectation("\"", false);
  var peg$e82 = peg$classExpectation([["a", "z"], ["0", "9"], "!", "'", "#", "%", "&", "(", ")", "*", "+", [",", "."], "/", ":", " ", ";", "<", "=", ">", "?", "[", "]", "^", "_", "{", "|", "}", "~", "\t", "\v", "\f"], false, true);
  var peg$e83 = peg$literalExpectation("%:%:", false);
  var peg$e84 = peg$literalExpectation("...", false);
  var peg$e85 = peg$literalExpectation("<<=", false);
  var peg$e86 = peg$literalExpectation(">>=", false);
  var peg$e87 = peg$literalExpectation("++", false);
  var peg$e88 = peg$literalExpectation("--", false);
  var peg$e89 = peg$literalExpectation("+=", false);
  var peg$e90 = peg$literalExpectation("-=", false);
  var peg$e91 = peg$literalExpectation("*=", false);
  var peg$e92 = peg$literalExpectation("/=", false);
  var peg$e93 = peg$literalExpectation("%=", false);
  var peg$e94 = peg$literalExpectation("&=", false);
  var peg$e95 = peg$literalExpectation("^=", false);
  var peg$e96 = peg$literalExpectation("|=", false);
  var peg$e97 = peg$literalExpectation("==", false);
  var peg$e98 = peg$literalExpectation("!=", false);
  var peg$e99 = peg$literalExpectation("<=", false);
  var peg$e100 = peg$literalExpectation(">=", false);
  var peg$e101 = peg$literalExpectation(">>", false);
  var peg$e102 = peg$literalExpectation("<<", false);
  var peg$e103 = peg$literalExpectation("->", false);
  var peg$e104 = peg$literalExpectation("&&", false);
  var peg$e105 = peg$literalExpectation("||", false);
  var peg$e106 = peg$literalExpectation("##", false);
  var peg$e107 = peg$literalExpectation("%:", false);
  var peg$e108 = peg$literalExpectation("<:", false);
  var peg$e109 = peg$literalExpectation(":>", false);
  var peg$e110 = peg$literalExpectation("<%", false);
  var peg$e111 = peg$literalExpectation("%>", false);
  var peg$e112 = peg$classExpectation(["!", "#", ["%", "&"], ["(", "/"], [":", "?"], "[", ["]", "^"], ["{", "~"]], false, false);

  var peg$f0 = function(matches) { return matches.join(""); };
  var peg$f1 = function(token) { addTokenPosition(token); return token + " "; };
  var peg$f2 = function() { return ""; };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$resultsCache = {};

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseprogram() {
    var s0, s1, s2;

    var key = peg$currPos * 36 + 0;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsepreprocess_match();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsepreprocess_match();
    }
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsepreprocess_match() {
    var s0, s1, s2;

    var key = peg$currPos * 36 + 1;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsetoken();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2();
      }
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    var key = peg$currPos * 36 + 2;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r0.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesource_character_set() {
    var s0;

    var key = peg$currPos * 36 + 3;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseextended_source_character_set();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseextended_source_character_set() {
    var s0;

    var key = peg$currPos * 36 + 4;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 64) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetoken() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 5;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseinclude();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsekeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifier();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseconstant();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = input.charAt(peg$currPos);
            if (peg$r2.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = undefined;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsestring_literal();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepunctuator();
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseinclude() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 6;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsekeyword() {
    var s0;

    var key = peg$currPos * 36 + 7;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 14) === peg$c3) {
      s0 = peg$c3;
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 13) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c5) {
          s0 = peg$c5;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c6) {
            s0 = peg$c6;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c7) {
              s0 = peg$c7;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c8) {
                s0 = peg$c8;
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c9) {
                  s0 = peg$c9;
                  peg$currPos += 8;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 8) === peg$c10) {
                    s0 = peg$c10;
                    peg$currPos += 8;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e14); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c11) {
                      s0 = peg$c11;
                      peg$currPos += 8;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e15); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 8) === peg$c12) {
                        s0 = peg$c12;
                        peg$currPos += 8;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e16); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c13) {
                          s0 = peg$c13;
                          peg$currPos += 8;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e17); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8) === peg$c14) {
                            s0 = peg$c14;
                            peg$currPos += 8;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e18); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c15) {
                              s0 = peg$c15;
                              peg$currPos += 8;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e19); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 7) === peg$c16) {
                                s0 = peg$c16;
                                peg$currPos += 7;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e20); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 7) === peg$c17) {
                                  s0 = peg$c17;
                                  peg$currPos += 7;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e21); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 7) === peg$c18) {
                                    s0 = peg$c18;
                                    peg$currPos += 7;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c19) {
                                      s0 = peg$c19;
                                      peg$currPos += 6;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e23); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c20) {
                                        s0 = peg$c20;
                                        peg$currPos += 6;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e24); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c21) {
                                          s0 = peg$c21;
                                          peg$currPos += 6;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e25); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 6) === peg$c22) {
                                            s0 = peg$c22;
                                            peg$currPos += 6;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e26); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 6) === peg$c23) {
                                              s0 = peg$c23;
                                              peg$currPos += 6;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e27); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 6) === peg$c24) {
                                                s0 = peg$c24;
                                                peg$currPos += 6;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 6) === peg$c25) {
                                                  s0 = peg$c25;
                                                  peg$currPos += 6;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e29); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 6) === peg$c26) {
                                                    s0 = peg$c26;
                                                    peg$currPos += 6;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e30); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 6) === peg$c27) {
                                                      s0 = peg$c27;
                                                      peg$currPos += 6;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e31); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 5) === peg$c28) {
                                                        s0 = peg$c28;
                                                        peg$currPos += 5;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e32); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c29) {
                                                          s0 = peg$c29;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e33); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 5) === peg$c30) {
                                                            s0 = peg$c30;
                                                            peg$currPos += 5;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e34); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 5) === peg$c31) {
                                                              s0 = peg$c31;
                                                              peg$currPos += 5;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e35); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 5) === peg$c32) {
                                                                s0 = peg$c32;
                                                                peg$currPos += 5;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e36); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 5) === peg$c33) {
                                                                  s0 = peg$c33;
                                                                  peg$currPos += 5;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e37); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 5) === peg$c34) {
                                                                    s0 = peg$c34;
                                                                    peg$currPos += 5;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e38); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 4) === peg$c35) {
                                                                      s0 = peg$c35;
                                                                      peg$currPos += 4;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$e39); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 4) === peg$c36) {
                                                                        s0 = peg$c36;
                                                                        peg$currPos += 4;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$e40); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 4) === peg$c37) {
                                                                          s0 = peg$c37;
                                                                          peg$currPos += 4;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$e41); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 4) === peg$c38) {
                                                                            s0 = peg$c38;
                                                                            peg$currPos += 4;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$e42); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 4) === peg$c39) {
                                                                              s0 = peg$c39;
                                                                              peg$currPos += 4;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$e43); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 4) === peg$c40) {
                                                                                s0 = peg$c40;
                                                                                peg$currPos += 4;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$e44); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 4) === peg$c41) {
                                                                                  s0 = peg$c41;
                                                                                  peg$currPos += 4;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e45); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 4) === peg$c42) {
                                                                                    s0 = peg$c42;
                                                                                    peg$currPos += 4;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e46); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 3) === peg$c43) {
                                                                                      s0 = peg$c43;
                                                                                      peg$currPos += 3;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e47); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 3) === peg$c44) {
                                                                                        s0 = peg$c44;
                                                                                        peg$currPos += 3;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e48); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 2) === peg$c45) {
                                                                                          s0 = peg$c45;
                                                                                          peg$currPos += 2;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e49); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 2) === peg$c46) {
                                                                                            s0 = peg$c46;
                                                                                            peg$currPos += 2;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e50); }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 8;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseconstant() {
    var s0;

    var key = peg$currPos * 36 + 9;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsedecimal_floating_constant();
    if (s0 === peg$FAILED) {
      s0 = peg$parseinteger_constant();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifier();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecharacter_constant();
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseinteger_constant() {
    var s0, s1, s2;

    var key = peg$currPos * 36 + 10;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsedecimal_constant();
    if (s1 === peg$FAILED) {
      s1 = peg$parseoctal_constant();
      if (s1 === peg$FAILED) {
        s1 = peg$parsehexadecimal_constant();
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 48) {
            s1 = peg$c47;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e52); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinteger_suffix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedecimal_constant() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 11;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsenonzero_digit();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedigit();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsedigit();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenonzero_digit() {
    var s0;

    var key = peg$currPos * 36 + 12;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r4.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedigit() {
    var s0;

    var key = peg$currPos * 36 + 13;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r5.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseoctal_constant() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 14;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c47;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseoctal_digit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseoctal_digit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseoctal_digit() {
    var s0;

    var key = peg$currPos * 36 + 15;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r6.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsehexadecimal_constant() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 16;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsehexadecimal_prefix();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsehexadecimal_digit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsehexadecimal_digit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsehexadecimal_prefix() {
    var s0;

    var key = peg$currPos * 36 + 17;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 2) === peg$c48) {
      s0 = peg$c48;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c49) {
        s0 = peg$c49;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsehexadecimal_digit() {
    var s0;

    var key = peg$currPos * 36 + 18;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r7.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseinteger_suffix() {
    var s0, s1, s2;

    var key = peg$currPos * 36 + 19;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseunsigned_suffix();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselong_long_suffix();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseunsigned_suffix();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselong_suffix();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselong_long_suffix();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseunsigned_suffix();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselong_suffix();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseunsigned_suffix();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseunsigned_suffix() {
    var s0;

    var key = peg$currPos * 36 + 20;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r8.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselong_suffix() {
    var s0;

    var key = peg$currPos * 36 + 21;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r9.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselong_long_suffix() {
    var s0;

    var key = peg$currPos * 36 + 22;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 2) === peg$c50) {
      s0 = peg$c50;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c51) {
        s0 = peg$c51;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedecimal_floating_constant() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 23;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsefractional_constant();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexponent_part();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsefloating_suffix();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsedigit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsedigit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexponent_part();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefloating_suffix();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefractional_constant() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 36 + 24;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedigit();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsedigit();
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c52;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsedigit();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsedigit();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsedigit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsedigit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c52;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e63); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexponent_part() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 36 + 25;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r10.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r11.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$parsedigit();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsedigit();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefloating_suffix() {
    var s0;

    var key = peg$currPos * 36 + 26;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r12.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsecharacter_constant() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 27;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsec_char();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c53;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsec_char() {
    var s0;

    var key = peg$currPos * 36 + 28;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseescape_sequence();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseescape_sequence() {
    var s0;

    var key = peg$currPos * 36 + 29;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsesimple_escape_sequence();
    if (s0 === peg$FAILED) {
      s0 = peg$parseoctal_escape_sequence();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehexadecimal_escape_sequence();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesimple_escape_sequence() {
    var s0;

    var key = peg$currPos * 36 + 30;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 2) === peg$c54) {
      s0 = peg$c54;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c55) {
        s0 = peg$c55;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c56) {
          s0 = peg$c56;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c57) {
            s0 = peg$c57;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e71); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c58) {
              s0 = peg$c58;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e72); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c59) {
                s0 = peg$c59;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e73); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c60) {
                  s0 = peg$c60;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e74); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c61) {
                    s0 = peg$c61;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e75); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c62) {
                      s0 = peg$c62;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e76); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c63) {
                        s0 = peg$c63;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e77); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c64) {
                          s0 = peg$c64;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e78); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseoctal_escape_sequence() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 36 + 31;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c65;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseoctal_digit();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (s3.length >= 3) {
          s4 = peg$FAILED;
        } else {
          s4 = peg$parseoctal_digit();
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsehexadecimal_escape_sequence() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 36 + 32;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsehexadecimal_digit();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (s3.length >= 2) {
          s4 = peg$FAILED;
        } else {
          s4 = peg$parsehexadecimal_digit();
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestring_literal() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 36 + 33;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c67;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parses_char();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parses_char();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c67;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parses_char() {
    var s0;

    var key = peg$currPos * 36 + 34;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = input.charAt(peg$currPos);
    if (peg$r13.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseescape_sequence();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsepunctuator() {
    var s0;

    var key = peg$currPos * 36 + 35;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 4) === peg$c68) {
      s0 = peg$c68;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c69) {
        s0 = peg$c69;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c70) {
          s0 = peg$c70;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e85); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c71) {
            s0 = peg$c71;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e86); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c72) {
              s0 = peg$c72;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e87); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c73) {
                s0 = peg$c73;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e88); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c74) {
                  s0 = peg$c74;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e89); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c75) {
                    s0 = peg$c75;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e90); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c76) {
                      s0 = peg$c76;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e91); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c77) {
                        s0 = peg$c77;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e92); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c78) {
                          s0 = peg$c78;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e93); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c79) {
                            s0 = peg$c79;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e94); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c80) {
                              s0 = peg$c80;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e95); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c81) {
                                s0 = peg$c81;
                                peg$currPos += 2;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e96); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c82) {
                                  s0 = peg$c82;
                                  peg$currPos += 2;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e97); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c83) {
                                    s0 = peg$c83;
                                    peg$currPos += 2;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e98); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c84) {
                                      s0 = peg$c84;
                                      peg$currPos += 2;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e99); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 2) === peg$c85) {
                                        s0 = peg$c85;
                                        peg$currPos += 2;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e100); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c86) {
                                          s0 = peg$c86;
                                          peg$currPos += 2;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e101); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 2) === peg$c87) {
                                            s0 = peg$c87;
                                            peg$currPos += 2;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e102); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c88) {
                                              s0 = peg$c88;
                                              peg$currPos += 2;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e103); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 2) === peg$c89) {
                                                s0 = peg$c89;
                                                peg$currPos += 2;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e104); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c90) {
                                                  s0 = peg$c90;
                                                  peg$currPos += 2;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e105); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 2) === peg$c91) {
                                                    s0 = peg$c91;
                                                    peg$currPos += 2;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e106); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 2) === peg$c92) {
                                                      s0 = peg$c92;
                                                      peg$currPos += 2;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e107); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 2) === peg$c93) {
                                                        s0 = peg$c93;
                                                        peg$currPos += 2;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e108); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c94) {
                                                          s0 = peg$c94;
                                                          peg$currPos += 2;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e109); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 2) === peg$c95) {
                                                            s0 = peg$c95;
                                                            peg$currPos += 2;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e110); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 2) === peg$c96) {
                                                              s0 = peg$c96;
                                                              peg$currPos += 2;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e111); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = input.charAt(peg$currPos);
                                                              if (peg$r14.test(s0)) {
                                                                peg$currPos++;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e112); }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }


  const thisParser = this; 
  thisParser.tokenPositions = new Map();
  // length of the output string of the lexer
  let outputLength = 0;

  /**
   * Returns the location of the token, adjusted for "\\\n" that were removed by the preprocessor.
   */
  function getAdjustedTokenLocation() {
    const FALSE_NEWLINE_CHAR_LENGTH = 2;
    const adjustedLocation = location();
    let numOfFalseNewlinesBefStart = 0;
    let numOfFalseNewlinesBefEnd = 0;
    for (const falseNewlinePosition of thisParser.falseNewlinePositions) {
      if (falseNewlinePosition > adjustedLocation.end.offset) {
        break;
      }
      numOfFalseNewlinesBefEnd++;
      if (falseNewlinePosition < adjustedLocation.start.offset) {
        numOfFalseNewlinesBefStart++;
      }
    }
    adjustedLocation.start.offset += FALSE_NEWLINE_CHAR_LENGTH * numOfFalseNewlinesBefStart;
    adjustedLocation.start.line += numOfFalseNewlinesBefStart;
    adjustedLocation.end.offset += FALSE_NEWLINE_CHAR_LENGTH * numOfFalseNewlinesBefEnd;
    adjustedLocation.end.line += numOfFalseNewlinesBefEnd;
    return adjustedLocation;
  }

  function addTokenPosition(token) {
    const tokenPosition = getAdjustedTokenLocation();
    for (let i = 0; i < token.length; ++i) {
      thisParser.tokenPositions.set(outputLength + i, tokenPosition);
    }
    outputLength += token.length + 1;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  StartRules: ["program"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
